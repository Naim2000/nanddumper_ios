.macro ios_syscall name num
\name:
	.long 0xE6000010 | (\num << 5)
	bx lr
.endm

.thumb
start:
	push	{lr}
	@ Create a new thread to do this stuff.
	adr		r0, entrypoint
	ldm		r0, {r0, r1, r2, r3, r4, r5}
	push	{r4, r5}
	adr		r7, IOS_CreateThread
	blx		r7
	add		sp, #0x8

	mov		r4, r0
	ldr		r0, threadid_out
	mov		r1, #0x4
	str		r4, [r0]
	adr		r7, IOS_FlushDCache
	blx		r7

	@ We need to go and enable system mode.
	@ Threads[threadid].userContext.cpsr |= 0x1F;
	ldr		r0, =0xFFFE0000 @ IOS_Thread threads[100]
	mov		r1, #0xB0       @ sizeof (IOS_Thread)
	mul		r1, r4
	add		r0, r1
	@ Lucky for us, `cpsr` is the very first property of the IOS_Thread structure.
	ldr		r1, [r0]
	mov		r2, #0x1F
	orr		r1, r2
	str		r1, [r0]

	mov		r0, r4
	adr		r7, IOS_StartThread
	blx		r7

	pop		{pc}

.align 2
.arm
ios_syscall IOS_CreateThread 0
ios_syscall IOS_StartThread 5
ios_syscall IOS_FlushDCache 0x40

.pool
entrypoint:     .word 0x70696B61
argument:       .word 0x5555AAAA
stack_pointer:  .word 0x53505350
stack_size:     .word 0x535A535A
priority:       .word 0x7F
detached:       .word 0x1
threadid_out:   .word 0x67452301
